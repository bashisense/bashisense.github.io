# 构建说明

## 1. 代码结构
```
Walos根目录：
|--deps        // 依赖的第三方库目录
|--docs        // 文档目录
|--dv300       // Hi3516DV300平台目标文件
|--macosx      // MacOS平台目标文件
|--release     // 发布文件，包括各种资源文件、配置等
|--ubuntu      // ubuntu amd64平台目标文件
|--xm6xx       // XM630/650平台目标文件
```

## 2. 构建SDK
构建过程为分两步：
1. 配置运行环境：
- 确认目标平台已经安装了工具链，并且命令行环境可以搜索到相应命令:PATH设置正确 
- 整个WalOS的构建需要luajit-2.1.0-beta3版本，确认已安装此工具
- Git库取整个库

2. 进入deps目录，构建依赖库；

   ***其它问题,luajit ffi.load会使用系统的动态库连接，而我们的环境有ssl,crypto动态库，所以最佳的方案是把libtffi_wrap.so, libsqlite3.so复制到一个单独的目录，并采用export LD_LIBRARY_PATH=该目录，解决luajit ffi.load找不到动态库的问题。***

## 3. 编译依赖库
WalOS-SDK主要包括WalOS所需要的依赖库，他们主要有几组组成：
1. lua组，包括：LuaJIT-2.1.0-beta3, luafilesystem-1_7_0_2, luasocket-3.0-rc1，编译时请按此顺序编译；
2. gui组，包括：freetype-2.4.0, lvgl-7.0.0，编译时请按此顺序编译；
3. turbo组，包括：openssl-OpenSSL_1_0_2u, turbo-2.1.3，编译时请按此顺序编译；
4. libevent组，包括：libevent-2.1.11-stable，
5. sqlite组，包括：sqlite-autoconf-3310100

Linux平台以XM650平台为例，ubuntu、Hi3516DV300平台类似，工具链的安装目录可以根据需求安装，没有强制要求；
- XM650平台工具链安装目录：/opt/xm_toolchain/arm-xm-linux/usr/bin
- DV300平台工具链安装目录：/opt/hisi-toolchain

### 编译
--------------

#### 1. deps/LuaJIT-2.1.0-beta3
1. 修改 src/Makefile：
   #XCFLAGS+= -DLUAJIT_ENABLE_GC64     // 关闭此选项，macosx/ubuntu需要打开此选项
   BUILDMODE= static                   // 编译静态方式
2. make HOST_CC="gcc -m32" CROSS=arm-xm-linux- PREFIX=/path/to/you/dir all install

#### 2. deps/luafilesystem-1_7_0_2
1. make cc=arm-xm-linux-gcc PREFIX=/path/to/you/dir install

#### 3. deps/luasocket-3.0-rc1
1. make PLAT=linux CC_linux=arm-xm-linux-gcc LD_linux=arm-xm-linux-gcc PREFIX=/path/to/you/dir
2. make install

#### 4. deps/freetype-2.4.0
1. ./configure --disable-shared --enable-static --without-fsspec --without-fsref -without-quickdraw-toolbox --without-quickdraw-carbon --without-ats --with-pic  --without-zlib --prefix=/path/to/you/dir --host=arm-xm-linux
2. make all install

#### 5. deps/lvgl-7.0.0
1. lv_config.h
- #define LV_HOR_RES_MAX      (480)                                           
- #define LV_VER_RES_MAX      (800)
- #define LV_COLOR_DEPTH      16
2. make -f Makefile.xm6xx PREFIX=/path/to/you/dir 

#### 6. deps/openssl-OpenSSL_1_0_2u
1.  ./Configure linux-generic32 --prefix=/path/to/you/dir --openssldir=/path/to/you/dir/openssl shared
2. make CC=arm-xm-linux-gcc RANLIB=arm-xm-linux-ranlib LD=arm-xm-linux-ld MAKEDEPPROG=arm-xm-linux-gcc PROCESSOR=ARM all install

#### 7. deps/turbo-2.1.3
1. make PREIFX=/path/to/you/dir CC = arm-xm-linux-gcc all install

#### 8. deps/libevent-2.1.11-stable
1. ./configure --disable-shared --prefix=/path/to/you/dir --host=arm-xm-linux
2. make all install

#### 9. deps/sqlite-autoconf-3310100
1. ./configure --host=arm-xm-linux --prefix=/path/to/you/dir
2. make all install


###打包
-------------

## 4. 制做安装包
1. 进入平台目录，如xm6xx，创建WalOS子目录，并进入子目录；
2. 复制$(WalOS-SDK)/release目录下的gui,openssl, data, modules目录到此目录；
3. 复制$(WalOS-SDK)/release目录下的default.json 到此目录；
4. 复制$(WalOS-SDK)/xm6xx/lib 目录到此目录，删除所有非动态库文件
5. 创建app目录，编译WalOS的lua代码，包复制到此目录；
6. 编译WalOS C代码，并复制到此目录；

***注意:目标设备上，需要配置LD_LIBRARY_PATH环境变量指向lib目录；***
